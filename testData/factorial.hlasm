*****************************  FACTORIAL  *****************************
* The following recursive macro calculates a factorial of its parameter
* during compile time. The result is stored in variable symbol RES.
         MACRO
         FACT  &A

         GBLA  RES We create global variable symbol RES
* It is created with default value 0, so initialize it to 1 if this is
* the topmost call of this macro.
         AIF   (&SYSNEST NE 1).INITEND
&RES     SETA  1
.INITEND AIF   (&A EQ 0).SKIP   Nothing to do for a factorial of 0
&RES     SETA  &RES*&A          Do the actual multiplication
* The 'NEXT' variable is local to the scope of current macro execution:
&NEXT     SETA  &A-1
         FACT  &NEXT            Do the factorial of A-1
.SKIP    ANOP
         MEND                                                          C 1233123
invalid.ignored

         GBLA  RES  We have to unhide the global variable symbol RES,  X123456789
                    otherwise, it would not be visible in this scope
         FACT  5    Now we 'call' the macro, and it will assign 5! to  -123456789
                    &RES                                               -
                    Another line of comment

* We can hover over the LEN120 symbol while running macro tracer to see
* that its length is indeed 120:
LEN120   DS    CL(&RES)
* Unfortunately, the macro cannot calculate factorial of numbers
* greater than 12 because it does not fit into 32 bit variable.
         FACT  6
LEN720   DS    CL(&RES)

here     DS    (&RES) no problem, i'm a comment

*************************  ASSEMBLER OPTIONS  *************************
* The following demonstrates how to set assembler options in
* configuration files. If you go to proc_grps.json you can see that
* assembler option 'SYSPARM' is set to value 'SEVEN' in the
* process group 'P1'.
* However, the calculation of 7! is skipped by the AIF instruction:
         AIF   ('&SYSPARM' NE 'SEVEN').NEXT
         FACT  7
         AGO   .FINAL

* The reason for this behavior lies in the pgm_conf.json where the
* 'SYSPARM' assembler option is overridden for this particular file.
* Hence, the calculation of 8! takes place instead:
.NEXT    AIF   ('&SYSPARM' NE 'EIGHT').FINAL
         FACT  8
         AGO   .FINAL

* Finally, we can print the result in the 'PROBLEMS' tab by using MNOTE
* instruction. Try using different MNOTE levels!
.FINAL   MNOTE 2,'Result is &RES'

         END
